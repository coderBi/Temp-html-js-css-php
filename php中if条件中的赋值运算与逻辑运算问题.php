<?php
/*
	网上流传着这么一种情况 if($a = 2 && $b = 3),然后发现$a = true 而 $b = 3
分析：
	1）$a = $b && $c; 
	2）if语句中的表达式$a = 2 && $b = 3，表达式是从右向左进行计算的，首先计算$b = 3 而且这个表达式的值是3，然后计算 $a = 2 && 3, 这就得出了 $a = true
	3)同样的延伸问题 if($a = 0 || $b = 100) 和 if($a = 2 && $b = 3 && $c = 4)(这个表达式会导致$a和$b都成为true) 会存在同样的效果。
扩展：运算符的优先级
赋值运算符  < 逻辑运算符(二元) < 加减乘除算术运算符 < 一元逻辑运算符(例如！) < 自增自减 < 数组运算 '['  < clone和new  
*/

$a = 5;
$b = 4;
$x = 5;
if($a=8 && $b=9 && $x = 100){
 echo "yes\n";
}
//$a $b 都成了true
var_dump($a,$b,$x); 

/*扩展: 没有逻辑运算，赋值语句可正常工作*/
if($a = 100)
	echo "yes\n";
var_dump($a);

/*扩展：有逻辑运行 || 同样*/
if($a = 0 || $b = 1)
	echo "yes\n";
var_dump($a);